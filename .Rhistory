})
legend(140000, 80000, legend=c('alb', 'atr', 'gam'), col=c('green', 'orange', 'red'), lty=1, box.lty = 0, cex=0.8)
gap_range <- seq(10, 250000, 5000)
grimm_g <- testGRIMM_g(g=gap_range)
## Number of blocks
col_blocks <- unlist(lapply(grimm_g, nrow))
plot(x=gap_range, y=col_blocks, type='l', xlab = 'Gap size bp', ylab='Number of blocks')
## Mean length of blocks
mean_block_length <- lapply(lapply(grimm_g, '[', c(4, 8, 12)), function(lengths){
return(c(
mean(lengths[[1]]),
mean(lengths[[2]]),
mean(lengths[[3]])
))
})
mean_block_length <- do.call(rbind.data.frame, mean_block_length)
names(mean_block_length) <- c('alb', 'atr', 'gam')
sp_opt_gap <- lapply(c(1, 2, 3), function(n){
gap_range[which(mean_block_length[,n]>142000)[1]]
})
plot(gap_range, mean_block_length$alb, type = 'l', col='green', xlab = 'Gap size, bp', ylab = 'Mean block length, bp')
lines(gap_range, mean_block_length$atr, col='orange')
lines(gap_range, mean_block_length$gam, col='red')
lines(c(0, 250000), c(142000, 142000), col='black', pch=22, lty=2)
lapply(sp_opt_gap, function(gap){
lines(c(gap, gap), c(0, 142000), pch=22, lty=2)
})
legend(140000, 80000, legend=c('alb', 'atr', 'gam'), col=c('green', 'orange', 'red'), lty=1, box.lty = 0, cex=0.8)
800*1000
plot(gap_range, mean_block_length$alb, type = 'l', col='green', xlab = 'Gap size, bp', ylab = 'Mean block length, bp')
lines(gap_range, mean_block_length$atr, col='orange')
lines(gap_range, mean_block_length$gam, col='red')
lines(c(0, 250000), c(142000, 142000), col='black', pch=22, lty=2)
lapply(sp_opt_gap, function(gap){
lines(c(gap, gap), c(0, 142000), pch=22, lty=2)
})
legend(140000, 80000, legend=c('alb', 'atr', 'gam'), col=c('green', 'orange', 'red'), lty=1, box.lty = 0, cex=0.8)
axis(side = 1, labels = seq(0, 250000, 5000))
plot(gap_range, mean_block_length$alb, type = 'l', col='green', xlab = 'Gap size, bp', ylab = 'Mean block length, bp')
lines(gap_range, mean_block_length$atr, col='orange')
lines(gap_range, mean_block_length$gam, col='red')
lines(c(0, 250000), c(142000, 142000), col='black', pch=22, lty=2)
lapply(sp_opt_gap, function(gap){
lines(c(gap, gap), c(0, 142000), pch=22, lty=2)
})
legend(140000, 80000, legend=c('alb', 'atr', 'gam'), col=c('green', 'orange', 'red'), lty=1, box.lty = 0, cex=0.8)
axis(side = 1, at= seq(0, 250000, 5000),  labels = seq(0, 250000, 5000))
plot(gap_range, mean_block_length$alb, type = 'l', col='green', xlab = 'Gap size, bp', ylab = 'Mean block length, bp')
lines(gap_range, mean_block_length$atr, col='orange')
lines(gap_range, mean_block_length$gam, col='red')
lines(c(0, 250000), c(142000, 142000), col='black', pch=22, lty=2)
lapply(sp_opt_gap, function(gap){
lines(c(gap, gap), c(0, 142000), pch=22, lty=2)
})
legend(140000, 80000, legend=c('alb', 'atr', 'gam'), col=c('green', 'orange', 'red'), lty=1, box.lty = 0, cex=0.8)
axis(side = 1, at= seq(0, 250000, 5000),  labels = seq(0, 250000, 5000), padj = 1)
80000+115000+240000
435000/3
source('R/visualize.R')
col_blocks <- unlist(lapply(grimm_g, nrow))
plot(x=gap_range, y=col_blocks, type='l', xlab = 'Gap size bp', ylab='Number of blocks')
source('./R/visualize.R')
source('./R/visualize.R')
source('./R/visualize.R')
source('./R/visualize.R')
blocks <- read.table('./data/processed/blocks.txt')
View(blocks)
source('./R/functions/arrange_chr.R')
source('./R/functions/through.R')
source('./R/functions/through_chr.R')
orths.fulltable <- read.csv('./data/processed/alb_atr_gam_sin(with coords).csv')
# Arrange atroparvus
atr_order <- read.csv2('./data/atr_order_with_x.csv')
atr_chr <- arrange_chr(orths.fulltable[,c('X2.1')], atr_order[,c(1, 2)])
orths.fulltable[,c(6:10)] <- through_num(orths.fulltable[,c(6:10)], atr_order)
# Arrange albimanus and gambiae
goodChrs <- c("X",  "2R", "2L", "3R", "3L")
# albimanus
orths.fulltable[,c(3, 4)] <- through_chr(orths.fulltable[,c(2:4)], chrs=goodChrs)
# gambiae
orths.fulltable[,c(13, 14)] <- through_chr(orths.fulltable[,c(12:14)], chrs=goodChrs)
View(orths.fulltable)
View(orths.fulltable)
which(is.na(match(orths.fulltable[,c(2)], goodChrs)))
orths.fulltable[which(is.na(match(orths.fulltable[,c(2)], goodChrs)))] <- NA
orths.fulltable[which(is.na(match(orths.fulltable[,c(2)], goodChrs))),] <- NA
View(orths.fulltable)
orths.fulltable[which(is.na(match(orths.fulltable[,c(12)], goodChrs))),]
orths.fulltable[which(is.na(match(orths.fulltable[,c(12)], goodChrs))),] <- NA
SinC.scaffolds <- read.csv2('https://raw.githubusercontent.com/seaman248/sinensis/master/data/SinC_Scaffolds.csv')[,c(4, 1, 5, 2, 3)]
SinC.scaffolds <- SinC.scaffolds[c(1:49, 51),c(1, 2, 3, 5)]
View(SinC.scaffolds)
SinC.SinS <- read.csv2('https://github.com/seaman248/sinensis/raw/master/data/S2_to_C2_bridge.csv')[,c(3, 2)]
View(SinC.SinS)
SinC.fulltable <- read.csv('https://raw.githubusercontent.com/seaman248/sinensis/master/data/sinC_genes.csv')
View(orths.fulltable)
View(SinC.fulltable)
orths.fulltable[,c(16:20)]
View(SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
for(ii in 1:nrow(SinS2)){
print(ii)
}
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
for(ii in 1:nrow(sinS2)){
print(ii)
}
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
View(orths.fulltable)
View(SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
for(ii in 1:nrow(sinS2)){
match(sinS2[ii,1], bridgeCS)
}
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
for(ii in 1:nrow(sinS2)){
match(sinS2[ii,1], bridgeCS[,2])
}
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
apply(sinS2, 1, function(generow){
generow[1]
})
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
apply(sinS2, 1, function(generow){
match(generow[1], bridgeCS[,2])
})
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
apply(sinS2, 1, function(generow){
bridgeCS[match(generow[1], bridgeCS[,2]), 1]
})
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
sinC2_geneIDs <- apply(sinS2, 1, function(generow){
bridgeCS[match(generow[1], bridgeCS[,2]), 1]
})
lapply(sinC2_geneIDs, function(sinC2_geneID){
match(sinC2_geneID, sinC2[, 3])
})
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
sinC2_geneIDs <- apply(sinS2, 1, function(generow){
bridgeCS[match(generow[1], bridgeCS[,2]), 1]
})
unlist(lapply(sinC2_geneIDs, function(sinC2_geneID){
match(sinC2_geneID, sinC2[, 3])
}))
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
sinC2_geneIDs <- apply(sinS2, 1, function(generow){
bridgeCS[match(generow[1], bridgeCS[,2]), 1]
})
sinC2_rows <- unlist(lapply(sinC2_geneIDs, function(sinC2_geneID){
match(sinC2_geneID, sinC2[, 3])
}))
sinC2[sinC2_rows, ]
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
changeSin <- function(sinS2, sinC2, bridgeCS){
sinC2_geneIDs <- apply(sinS2, 1, function(generow){
bridgeCS[match(generow[1], bridgeCS[,2]), 1]
})
sinC2_rows <- unlist(lapply(sinC2_geneIDs, function(sinC2_geneID){
match(sinC2_geneID, sinC2[, 3])
}))
return(sinC2[sinC2_rows, ])
}
changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
test <- changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
View(test)
changeSin <- function(sinS2, sinC2, bridgeCS){
sinC2_geneIDs <- apply(sinS2, 1, function(generow){
bridgeCS[match(generow[1], bridgeCS[,2]), 1]
})
sinC2_rows <- unlist(lapply(sinC2_geneIDs, function(sinC2_geneID){
match(sinC2_geneID, sinC2[, 3])
}))
return(sinC2[sinC2_rows, c(3, 2, 4, 5, 6)])
}
test <- changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
View(test)
orths.fulltable[,c(16:20)] <- changeSin(orths.fulltable[,c(16:20)], SinC.fulltable, SinC.SinS)
View(orths.fulltable)
through_num(ourths.fulltable[,c(16:20)], SinC.scaffolds[,c(1, 2)])
through_num(orths.fulltable[,c(16:20)], SinC.scaffolds[,c(1, 2)])
through_num(orths.fulltable[,c(16:20)], SinC.scaffolds)
paste0(orths.fulltable[,20], '1')
lapply(orths.fulltable[,20], function(n){
if(is.na(n)){
return(NA)
}else{
n <- paste0(n, '1')
as.numeric(n)
}
})
unlist(lapply(orths.fulltable[,20], function(n){
if(is.na(n)){
return(NA)
}else{
n <- paste0(n, '1')
as.numeric(n)
}
}))
orths.fulltable[,20] <- unlist(lapply(orths.fulltable[,20], function(n){
if(is.na(n)){
return(NA)
}else{
n <- paste0(n, '1')
as.numeric(n)
}
}))
through_num(orths.fulltable[,c(16:20)], SinC.scaffolds)
orths.fulltable[,c(16:20)] <- through_num(orths.fulltable[,c(16:20)], SinC.scaffolds)
orths.naomit <- na.omit(orths.fulltable)
View(orths.naomit)
names <- c('id', 'chr', 'start', 'end', 'strand')
c(
paste0('alb_', names)
)
source('~/rproj/full_genome_comparison/R/query_processing.R')
View(orths.naomit)
unlist(lapply(c('alb', 'atr', 'gam', 'sin'), function(sp){
paste0(sp, names)
}))
unlist(lapply(c('alb', 'atr', 'gam', 'sin'), function(sp){
paste0(sp, '_',names)
}))
names(orths.naomit) <- unlist(lapply(c('alb', 'atr', 'gam', 'sin'), function(sp){
paste0(sp, '_',names)
}))
write.csv2(orths.naomit, './data/alb_atr_gam_sin.csv', row.names = FALSE)
View(orths.naomit)
write.csv2(orths.naomit, './data/alb_atr_gam_sin.csv', row.names = FALSE, quote=FALSE)
orths.table <- read.csv2(orths.naomit, './data/alb_atr_gam_sin.csv', stringsAsFactors = FALSE)
orths.table <- read.csv2('./data/alb_atr_gam_sin.csv', stringsAsFactors = FALSE)
View(orths.table)
seq(4, 19, 5)
source('./R/functions/endToLength.R')
lapply(seq(4, 19, 5), function(endcol){
startcol <- endcol-1
endToLength(orths.table[,c(startcol, endcol)])
})
unlist(lapply(seq(4, 19, 5), function(endcol){
startcol <- endcol-1
endToLength(orths.table[,c(startcol, endcol)])
}), recursive = FALSE)
orths.table[,seq(4, 19, 5)] <- lapply(seq(4, 19, 5), function(endcol){
startcol <- endcol-1
endToLength(orths.table[,c(startcol, endcol)])
})
View(orths.table)
grimm_path <- '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt'
grimm_path <- '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt'
input_path <- '~/rproj/full_gene/data/processed/tableForGRIMMquery.txt'
output_anchors <- '~/rproj/full_gene/data/query_processed/anchors'
output_blocks <- '~/rproj/full_gene/data/query_processed/GRIMM'
write.table(orths.table, './data/processed/tableForGRIMMquery.txt', quote=FALSE, row.names = FALSE)
anchor_command <- paste(grimm_path, '-A -f', input_path, '-d', output_anchors)
anchor_command
system(anchor_command, wait = TRUE)
~/Documents/GRIMM_SYNTENY-2.02/grimm_synt
write.table(orths.table, './data/processed/tableForGRIMMquery.txt', quote=FALSE, row.names = FALSE)
grimm_path <- '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt'
input_path <- '~/rproj/full_genome_comparison/data/processed/tableForGRIMMquery.txt'
output_anchors <- '~/rproj/full_genome_comparison/data/query_processed/anchors'
output_blocks <- '~/rproj/full_genome_comparison/data/query_processed/GRIMM'
anchor_command <- paste(grimm_path, '-A -f', input_path, '-d', output_anchors)
system(anchor_command, wait = TRUE)
anchor_command <- paste(grimm_path, '-A -f', input_path, '-d', output_anchors)
system(anchor_command, wait = TRUE)
write.table(orths.table[,c(6:20)], './data/processed/tableForGRIMMquery.txt', quote=FALSE, row.names = FALSE)
write.table(orths.table[,c(6:20)], './data/processed/tableForGRIMMquery.txt', quote=FALSE, row.names = FALSE)
grimm_path <- '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt'
input_path <- '~/rproj/full_genome_comparison/data/processed/tableForGRIMMquery.txt'
output_anchors <- '~/rproj/full_genome_comparison/data/query_processed/anchors'
output_blocks <- '~/rproj/full_genome_comparison/data/query_processed/GRIMM'
anchor_command <- paste(grimm_path, '-A -f', input_path, '-d', output_anchors)
system(anchor_command, wait = TRUE)
colnames(orths.table[,c(1:5, 7:10, 12:15, 17:20)],)
write.table(orths.table[,c(1:5, 7:10, 12:15, 17:20)], './data/processed/tableForGRIMMquery.txt', quote=FALSE, row.names = FALSE)
grimm_path <- '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt'
input_path <- '~/rproj/full_genome_comparison/data/processed/tableForGRIMMquery.txt'
output_anchors <- '~/rproj/full_genome_comparison/data/query_processed/anchors'
output_blocks <- '~/rproj/full_genome_comparison/data/query_processed/GRIMM'
anchor_command <- paste(grimm_path, '-A -f', input_path, '-d', output_anchors)
system(anchor_command, wait = TRUE)
min_block = '2'
min_gap= '115000'
write.table(orths.table[,c(1:5, 7:10, 12:15, 17:20)], './data/processed/tableForGRIMMquery.txt', quote=FALSE, row.names = FALSE)
blocks_command <- paste0(
grimm_path, ' -f ',
output_anchors, '/unique_coords.txt', ' -d ',
output_blocks,
' -c -n', min_block, ' -g ', min_gap, ' -Q'
)
system(blocks_command, wait=TRUE)
library(genoPlotR)
blocks <- read.table('./data/query_processed/GRIMM/blocks.txt')
View(blocks)
names(blocks) <- c('id', rep(c('chr', 'start', 'end', 'strand'),4))
blocks[,1]<- as.character(blocks[,1])
blocks[,seq(4, 16, 4)]
3
blocks[,seq(3, 15, 4)]
blocks[,'end']
blocks[,seq(4, 16, 4)]
blocks[,seq(3, 15, 4)]
blocks[,seq(4, 16, 4)] <-blocks[,seq(3, 15, 4)]+blocks[,seq(4, 16, 4)]
blocks <- read.table('./data/query_processed/GRIMM/blocks.txt')
names(blocks) <- c('id', rep(c('chr', 'start', 'end', 'strand'),4))
blocks[,1]<- as.character(blocks[,1])
blocks[,seq(4, 16, 4)] <-blocks[,seq(3, 15, 4)]+blocks[,seq(4, 16, 4)]
View(blocks)
View(blocks)
blocks[,c(1, 6:9)]
View(blocks)
blocks[,c(1, 10:13)]
blocks[,c(1, 14:17)]
seq(1, 17, 4)
seq(5, 17, 4)
lapply(seq(5, 17, 4), function(n){
cols <- c(1, (n-3):(n))
})
lapply(seq(5, 17, 4), function(n){
cols <- c(1, (n-3):(n))
blocks[,cols]
})
ablocks <- lapply(seq(5, 17, 4), function(n){
cols <- c(1, (n-3):(n))
blocks[,cols]
})
names(ablocks) <- c('alb', 'atr', 'gam', 'sin')
source('./R/functions/create_seg.R')
source('./R/functions/create_xlims.R')
source('./R/functions/make_chr_annots.R')
source('./R/functions/block_annots.R')
source('./R/functions/make_comparison.R')
dna_segs <- lapply(ablocks, create_seqs)
### Create xlims
chr_order <- list(
alb=c('X','2R', '3L', '2L', '3R'),
atr=c('X', '3R', '2L', '2R', '3L'),
gam=c('X','2R', '2L', '3R', '3L'),
sin=c('X','2R', '2L', '3R', '3L')
)
cent_right <- list(
alb=c(F, T, F, F, T),
atr=c(T, T, T, T, T),
gam=c(F, T, F, T, F),
sin=c(F, T, F, T, F)
)
xlims <- as.list(
data.frame(
mapply(create_xlims, genes=ablocks, strand=cent_right, chrs=chr_order)
)
)
xlims <- as.list(
data.frame(
mapply(create_xlims, genes=ablocks, strand=cent_right, chrs=chr_order)
)
)
chr_order <- list(
alb=c('X','2R', '3L', '2L', '3R'),
atr=c('X', '3R', '2L', '2R', '3L'),
gam=c('X','2R', '2L', '3R', '3L'),
sin=c('X','3R', '2L', '2R', '3L')
)
cent_right <- list(
alb=c(F, T, F, F, T),
atr=c(T, T, T, T, T),
gam=c(F, T, F, T, F),
sin=c(F, T, F, T, F)
)
xlims <- as.list(
data.frame(
mapply(create_xlims, genes=ablocks, strand=cent_right, chrs=chr_order)
)
)
View(make_chr_annot)
mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)
as.list(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order))
as.list(data.frame(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)))
annotations <- as.list(data.frame(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)))
annotations <- as.list(as.data.frame(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)))
annotations <- as.list(data.frame(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)))
lapply(annotations, as.data.frame)
annotations <- lapply(annotations, as.data.frame)
plot_gene_map(
dna_segs = dna_segs,
xlims=xlims,
comparisons = comparisons,
annotations = annotations
)
comparisons <- make_comparisons(dna_segs)
annotations <- as.list(data.frame(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)))
annotations <- lapply(annotations, as.data.frame)
plot_gene_map(
dna_segs = dna_segs,
xlims=xlims,
comparisons = comparisons,
annotations = annotations
)
annotations <- as.list(data.frame(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)))
plot_gene_map(
dna_segs = dna_segs,
xlims=xlims,
comparisons = comparisons
)
View(create_seqs)
View(create_xlims)
ablocks[[1]]
ablocks[1, 2, 4, 3]
ablocks[[1, 2, 4, 3]]
ablocks[[c(1, 2, 4, 3)]]
ablocks[c(1, 2, 4, 3)]
blocks <- read.table('./data/query_processed/GRIMM/blocks.txt')
names(blocks) <- c('id', rep(c('chr', 'start', 'end', 'strand'),4))
blocks[,1]<- as.character(blocks[,1])
blocks[,seq(4, 16, 4)] <-blocks[,seq(3, 15, 4)]+blocks[,seq(4, 16, 4)]
ablocks <- lapply(seq(5, 17, 4), function(n){
cols <- c(1, (n-3):(n))
blocks[,cols]
})
ablocks <- ablocks[c(1, 2, 4, 3)]
names(ablocks) <- c('alb', 'atr', 'gam', 'sin')
### Create dna_seqs
dna_segs <- lapply(ablocks, create_seqs)
### Create xlims
chr_order <- list(
alb=c('X','2R', '3L', '2L', '3R'),
atr=c('X', '3R', '2L', '2R', '3L'),
sin=c('X','3R', '2L', '2R', '3L'),
gam=c('X','2R', '2L', '3R', '3L')
)
cent_right <- list(
alb=c(F, T, F, F, T),
atr=c(T, T, T, T, T),
sin=c(F, T, F, T, F),
gam=c(F, T, F, T, F)
)
xlims <- as.list(
data.frame(
mapply(create_xlims, genes=ablocks, strand=cent_right, chrs=chr_order)
)
)
### Create comparisons
comparisons <- make_comparisons(dna_segs)
### Create annotations
annotations <- as.list(data.frame(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)))
plot_gene_map(
dna_segs = dna_segs,
xlims=xlims,
comparisons = comparisons
)
names(ablocks) <- c('alb', 'atr', 'sin', 'gam')
plot_gene_map(
dna_segs = dna_segs,
xlims=xlims,
comparisons = comparisons
)
blocks <- read.table('./data/query_processed/GRIMM/blocks.txt')
names(blocks) <- c('id', rep(c('chr', 'start', 'end', 'strand'),4))
blocks[,1]<- as.character(blocks[,1])
blocks[,seq(4, 16, 4)] <-blocks[,seq(3, 15, 4)]+blocks[,seq(4, 16, 4)]
ablocks <- lapply(seq(5, 17, 4), function(n){
cols <- c(1, (n-3):(n))
blocks[,cols]
})
ablocks <- ablocks[c(1, 2, 4, 3)]
names(ablocks) <- c('alb', 'atr', 'sin', 'gam')
### Create dna_seqs
dna_segs <- lapply(ablocks, create_seqs)
### Create xlims
chr_order <- list(
alb=c('X','2R', '3L', '2L', '3R'),
atr=c('X', '3R', '2L', '2R', '3L'),
sin=c('X','3R', '2L', '2R', '3L'),
gam=c('X','2R', '2L', '3R', '3L')
)
cent_right <- list(
alb=c(F, T, F, F, T),
atr=c(T, T, T, T, T),
sin=c(F, T, F, T, F),
gam=c(F, T, F, T, F)
)
xlims <- as.list(
data.frame(
mapply(create_xlims, genes=ablocks, strand=cent_right, chrs=chr_order)
)
)
### Create comparisons
comparisons <- make_comparisons(dna_segs)
### Create annotations
annotations <- as.list(data.frame(mapply(make_chr_annot, sp_xlims=xlims, chrs=chr_order)))
plot_gene_map(
dna_segs = dna_segs,
xlims=xlims,
comparisons = comparisons
)
