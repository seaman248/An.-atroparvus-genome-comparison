GRIMM_by_chr.dir = './data/process/GRIMM_by_chr',
GRIMM_by_chr.dir.anchors = './data/process/GRIMM_by_chr/anchors',
GRIMM_by_chr.dir.blocks = './data/process/GRIMM_by_chr/blocks'
)
dirs <- lapply(dirs, function(dir){
if(!dir.exists(dir)){
system(paste0('mkdir ', dir))
dir
} else {
dir
}
})
}
dirs <- setDir()
# Make and set dirs
setDir <- function(){
dirs <- list(
GRIMM_by_chr.dir = './data/processed/GRIMM_by_chr',
GRIMM_by_chr.dir.anchors = './data/processed/GRIMM_by_chr/anchors',
GRIMM_by_chr.dir.blocks = './data/processed/GRIMM_by_chr/blocks'
)
dirs <- lapply(dirs, function(dir){
if(!dir.exists(dir)){
system(paste0('mkdir ', dir))
dir
} else {
dir
}
})
}
dirs <- setDir()
rm(dirs)
dirs <- setDir()
levels(GRIMMtable.full$alb_chr)
levels(GRIMMtable.full$gam_chr)
elements <- c('e1', 'e2', 'e3', 'e4', 'e5')
pipe('grep Distance Matrix: ./data/processed/report.txt')
pipe('./data/processed/report.txt')
readLines('./data/processed/report.txt')
test <- readLines('./data/processed/report.txt')
grep('Distance Matrix', test)
grep('Distance Matrix', test)
grep('Distance Matrix', test
)
anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# Make GRIMM_anchors
anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
system(anchor_command, wait=TRUE)
# Make GRIMM_synteny
blocks_command <- paste0(
grimm_path, ' -f ',
dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
dirs$GRIMM_by_chr.dir.blocks,
' -c -n', min_block, ' -g ', min_gap, ' -Q'
)
system(blocks_command, wait=TRUE)
# Read blocks.txt
report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
dist_line <- grep('Distance Matrix', report)
report <- report[(dist_line+1):(dist_line+3)]
textConnection(report)
dist_table <- read.table(report)
close(report)
return(dist_table)
})
}(GRIMM_tables.elX)
# Make grimm
function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
distTable <- lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# Make GRIMM_anchors
anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
system(anchor_command, wait=TRUE)
# Make GRIMM_synteny
blocks_command <- paste0(
grimm_path, ' -f ',
dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
dirs$GRIMM_by_chr.dir.blocks,
' -c -n', min_block, ' -g ', min_gap, ' -Q'
)
system(blocks_command, wait=TRUE)
# Read blocks.txt
report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
dist_line <- grep('Distance Matrix', report)
report <- report[(dist_line+1):(dist_line+3)]
textConnection(report)
dist_table <- read.table(report)
close(report)
return(dist_table)
})
return(dist_table)
}(GRIMM_tables.elX)
make_grimm <- function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
distTable <- lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# Make GRIMM_anchors
anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
system(anchor_command, wait=TRUE)
# Make GRIMM_synteny
blocks_command <- paste0(
grimm_path, ' -f ',
dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
dirs$GRIMM_by_chr.dir.blocks,
' -c -n', min_block, ' -g ', min_gap, ' -Q'
)
system(blocks_command, wait=TRUE)
# Read blocks.txt
report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
dist_line <- grep('Distance Matrix', report)
report <- report[(dist_line+1):(dist_line+3)]
textConnection(report)
dist_table <- read.table(report)
close(report)
return(dist_table)
})
return(dist_table)
}
make_grimm(GRIMM_tables.elX)
make_grimm(GRIMM_tables.elX)
# Make grimm
make_grimm <- function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
distTable <- lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# # Make GRIMM_anchors
# anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
# system(anchor_command, wait=TRUE)
#
# # Make GRIMM_synteny
# blocks_command <- paste0(
#   grimm_path, ' -f ',
#   dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
#   dirs$GRIMM_by_chr.dir.blocks,
#   ' -c -n', min_block, ' -g ', min_gap, ' -Q'
# )
# system(blocks_command, wait=TRUE)
#
# # Read blocks.txt
# report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
# dist_line <- grep('Distance Matrix', report)
# report <- report[(dist_line+1):(dist_line+3)]
# textConnection(report)
# dist_table <- read.table(report)
# close(report)
#
# return(dist_table)
})
return(dist_table)
}
make_grimm(GRIMM_tables.elX)
# Make grimm
make_grimm <- function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# # Make GRIMM_anchors
# anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
# system(anchor_command, wait=TRUE)
#
# # Make GRIMM_synteny
# blocks_command <- paste0(
#   grimm_path, ' -f ',
#   dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
#   dirs$GRIMM_by_chr.dir.blocks,
#   ' -c -n', min_block, ' -g ', min_gap, ' -Q'
# )
# system(blocks_command, wait=TRUE)
#
# # Read blocks.txt
# report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
# dist_line <- grep('Distance Matrix', report)
# report <- report[(dist_line+1):(dist_line+3)]
# textConnection(report)
# dist_table <- read.table(report)
# close(report)
#
# return(dist_table)
})
}
make_grimm(GRIMM_tables.elX)
# Make grimm
make_grimm <- function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# Make GRIMM_anchors
anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
system(anchor_command, wait=TRUE)
# # Make GRIMM_synteny
# blocks_command <- paste0(
#   grimm_path, ' -f ',
#   dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
#   dirs$GRIMM_by_chr.dir.blocks,
#   ' -c -n', min_block, ' -g ', min_gap, ' -Q'
# )
# system(blocks_command, wait=TRUE)
#
# # Read blocks.txt
# report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
# dist_line <- grep('Distance Matrix', report)
# report <- report[(dist_line+1):(dist_line+3)]
# textConnection(report)
# dist_table <- read.table(report)
# close(report)
#
# return(dist_table)
})
}
make_grimm(GRIMM_tables.elX)
# Make grimm
make_grimm <- function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# Make GRIMM_anchors
anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
system(anchor_command, wait=TRUE)
# Make GRIMM_synteny
blocks_command <- paste0(
grimm_path, ' -f ',
dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
dirs$GRIMM_by_chr.dir.blocks,
' -c -n', min_block, ' -g ', min_gap, ' -Q'
)
system(blocks_command, wait=TRUE)
#
# # Read blocks.txt
# report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
# dist_line <- grep('Distance Matrix', report)
# report <- report[(dist_line+1):(dist_line+3)]
# textConnection(report)
# dist_table <- read.table(report)
# close(report)
#
# return(dist_table)
})
}
make_grimm(GRIMM_tables.elX)
# Make grimm
make_grimm <- function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# Make GRIMM_anchors
anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
system(anchor_command, wait=TRUE)
# Make GRIMM_synteny
blocks_command <- paste0(
grimm_path, ' -f ',
dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
dirs$GRIMM_by_chr.dir.blocks,
' -c -n', min_block, ' -g ', min_gap, ' -Q'
)
system(blocks_command, wait=TRUE)
#
# # Read blocks.txt
report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
dist_line <- grep('Distance Matrix', report)
report <- report[(dist_line+1):(dist_line+3)]
textConnection(report)
dist_table <- read.table(report)
close(report)
return(dist_table)
})
}
make_grimm(GRIMM_tables.elX)
function(){
report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
}()
function(){
readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
}()
function(){
report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
return(report[1])
}()
report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
rm(report, test)
elements <- paste0('e', c(1:5))
# prepare table for GRIMM_synteny by chromosome
GRIMM_tables.elX <- lapply(elements, function(elX){
GRIMMtable.chr <- GRIMMtable.full[GRIMMtable.full$atr_scf==elX,]
})
# Make grimm
make_grimm <- function(
GRIMM_tables.elX,
grimm_path = '~/Documents/GRIMM_SYNTENY-2.02/grimm_synt',
min_block = '2', min_gap='115000',
dirs = setDir()
){
reports <- lapply(GRIMM_tables.elX, function(GRIMM_table){
# Write table with only one element
grimm_table.path <- paste0(dirs$GRIMM_by_chr.dir, '/grimm_table.txt')
write.table(GRIMM_table, file=grimm_table.path, quote=FALSE, row.names= FALSE)
# Make GRIMM_anchors
anchor_command <- paste(grimm_path, '-A -f', grimm_table.path, '-d', dirs$GRIMM_by_chr.dir.anchors)
system(anchor_command, wait=TRUE)
# Make GRIMM_synteny
blocks_command <- paste0(
grimm_path, ' -f ',
dirs$GRIMM_by_chr.dir.anchors, '/unique_coords.txt', ' -d ',
dirs$GRIMM_by_chr.dir.blocks,
' -c -n', min_block, ' -g ', min_gap, ' -Q'
)
system(blocks_command, wait=TRUE)
#
# # Read blocks.txt
report <- readLines(paste0(dirs$GRIMM_by_chr.dir.blocks, '/report.txt'))
return(report)
})
return(reports)
}
make_grimm(GRIMM_tables.elX)
GRIMMreports <- make_grimm(GRIMM_tables.elX)
rm(dirs)
lapply(GRIMMreports, function(report){
distance_row <- grep('Distance Matrix', report)
})
lapply(GRIMMreports, function(report){
distance_row <- grep('Distance Matrix', report)
rows_with_table <- (distance_row+1):(distance_row+3)
})
lapply(GRIMMreports, function(report){
distance_row <- grep('Distance Matrix', report)
rows_with_table <- (distance_row+1):(distance_row+3)
report[rows_with_table]
})
lapply(GRIMMreports, function(report){
distance_row <- grep('Distance Matrix', report)
rows_with_table <- (distance_row+1):(distance_row+3)
distance_table <- report[rows_with_table]
con <- textConnection(distance_table)
table <- read.table(con)
close(con)
return(table)
})
distance_tables <- lapply(GRIMMreports, function(report){
distance_row <- grep('Distance Matrix', report)
rows_with_table <- (distance_row+1):(distance_row+3)
distance_table <- report[rows_with_table]
con <- textConnection(distance_table)
table <- read.table(con)
close(con)
return(table)
})
names(distance_tables) <- elements
distance_tables <- lapply(GRIMMreports, function(report){
distance_row <- grep('Distance Matrix', report)
rows_with_table <- (distance_row+1):(distance_row+3)
distance_table <- report[rows_with_table]
con <- textConnection(distance_table)
table <- read.table(con)
close(con)
names(table) <- c('alb', 'atr', 'gam')
return(table)
})
names(distance_tables) <- elements
distance_tables
tableGrob()
library(gridExtra)
install.packages("gridExtra")
tableGrob(distance_tables$e1)
library(gridExtra)
tableGrob(distance_tables$e1)
distance_plot <- lapply(distance_tables, tableGrob)
grid.arrange(distance_plot)
grid.arrange(distance_plot[[1]])
# Extract distance tables
distance_tables <- lapply(GRIMMreports, function(report){
distance_row <- grep('Distance Matrix', report)
rows_with_table <- (distance_row+1):(distance_row+3)
distance_table <- report[rows_with_table]
con <- textConnection(distance_table)
table <- read.table(con)
close(con)
names(table) <- c('alb', 'atr', 'gam')
rownames(table) <- c('alb', 'atr', 'gam')
return(table)
})
names(distance_tables) <- elements
# Visualize discance_tables
distance_plot <- lapply(distance_tables, tableGrob)
grid.arrange(distance_plot[[1]])
grid.arrange(distance_plot[[1]], distance_plot[[2]], distance_plot[[3]])
grid.arrange(distance_plot[[1]], distance_plot[[2]], distance_plot[[3]], distance_plot[[4]], distance_plot[[5]])
grid.arrange(distance_plot[[1]], distance_plot[[2]], distance_plot[[3]], distance_plot[[4]], distance_plot[[5]], nrow=1)
grid.arrange(grobs=distance_plot, nrow=1)
grid.arrange(grobs=distance_plot, ncol=5)
distance_plot <- lapply(distance_tables, function(table){
tableGrob(table, theme = theme_bw())
})
distance_plot <- lapply(distance_tables, function(table){
tableGrob(table, theme = theme_bw())
})
distance_plot <- lapply(distance_tables, function(table){
tableGrob(table, theme = theme_bw())
})
distance_plot <- lapply(distance_tables, tableGrob)
grid.arrange(grobs=distance_plot, nrow=1)
text_grobs <- lapply(elements, textGrob)
text_grobs <- lapply(elements, textGrob)
library(ggplot2)
text_grobs <- lapply(elements, textGrob)
text_grobs <- lapply(elements, grid.text)
library(grid)
text_grobs <- lapply(elements, textGrob)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=1)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=1, ncol=5)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heigths=2:1)
grid.arrange(grobs=distance_plot, nrow=2, ncol=5, bottom=text_grobs, heigths=2:1)
grid.arrange(grobs=distance_plot, nrow=2, ncol=5, bottom=elements, heigths=2:1)
grid.arrange(grobs=distance_plot, nrow=2, ncol=5, bottom=text_grobs, heigths=2:1)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heigths=2:1)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=unit(c(1,10), c("in", "mm")))
unit(c(1,10), c("in", "mm"))
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=c(5:1))
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=c(5,1))
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=c('5mm','1mm'))
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=unit(c(1,10), c("in", "mm")))
mean_distance <- lapply(distance_tables, function(table){
mean(table[1, 2], table[1, 3], table[2, 3])
})
text_grobs <- lapply(paste(elements, ', (mean=', mean_distance,')'), textGrob)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=unit(c(1,10), c("in", "mm")))
# Calculate mean reverse distance
mean_distance <- lapply(distance_tables, function(table){
table[1, 2]+table[1, 3]+table[2, 3]
})
mean_distance <- lapply(distance_tables, function(table){
(table[1, 2]+table[1, 3]+table[2, 3])/3
})
distance_plot <- lapply(distance_tables, tableGrob)
text_grobs <- lapply(paste(elements, ', (mean=', mean_distance,')'), textGrob)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=unit(c(1,10), c("in", "mm")))
# Calculate mean reverse distance
mean_distance <- lapply(distance_tables, function(table){
mean <- (table[1, 2]+table[1, 3]+table[2, 3])/3
round(mean, digits=2)
})
distance_plot <- lapply(distance_tables, tableGrob)
text_grobs <- lapply(paste(elements, ', (mean=', mean_distance,')'), textGrob)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=unit(c(1,10), c("in", "mm")))
# Calculate mean reverse distance
mean_distance <- lapply(distance_tables, function(table){
mean <- (table[1, 2]+table[1, 3]+table[2, 3])/3
round(mean, digits=1)
})
# Visualize discance_tables
distance_plot <- lapply(distance_tables, tableGrob)
text_grobs <- lapply(paste(elements, ', (mean=', mean_distance,')'), textGrob)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=unit(c(1,10), c("in", "mm")))
text_grobs <- lapply(paste0(elements, ', (mean=', mean_distance,')'), textGrob)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=unit(c(1,10), c("in", "mm")))
distance_plot <- lapply(distance_tables, tableGrob, theme=theme_bw())
distance_plot <- lapply(distance_tables, tableGrob)
text_grobs <- lapply(paste0(elements, ', (mean=', mean_distance,')'), textGrob)
grid.arrange(grobs=c(distance_plot, text_grobs), nrow=2, ncol=5, heights=unit(c(1,10), c("in", "mm")))
